{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React Bar Code Reader\\\\BarcodeShopperProject\\\\hi.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  query GetExchangeRates {\\n    rates(currency: \\\"USD\\\") {\\n      currency\\n      rate\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n      query GetRates {\\n        rates(currency: \\\"USD\\\") {\\n          currency\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { useQuery, gql } from '@apollo/client';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React from 'react';\nvar client = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  cache: new InMemoryCache()\n});\nclient.query({\n  query: gql(_templateObject())\n}).then(function (result) {\n  return console.log(result.data);\n});\nvar EXCHANGE_RATES = gql(_templateObject2());\nexport default function ExchangeRates() {\n  var _useQuery = useQuery(EXCHANGE_RATES),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 25\n    }\n  }, \"Loading...\");\n  if (error) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 23\n    }\n  }, \"Error :(\");\n  return data.rates.map(function (_ref) {\n    var currency = _ref.currency,\n        rate = _ref.rate;\n    return React.createElement(ScrollView, {\n      key: currency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, \" \", currency, \": \", rate);\n  });\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/React Bar Code Reader/BarcodeShopperProject/hi.js"],"names":["ApolloClient","InMemoryCache","useQuery","gql","React","client","uri","cache","query","then","result","console","log","data","EXCHANGE_RATES","ExchangeRates","loading","error","rates","map","currency","rate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;;;;AAGA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,IAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC5BM,EAAAA,GAAG,EAAE,uCADuB;AAE5BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAFqB,CAAjB,CAAf;AAMAI,MAAM,CACDG,KADL,CACW;AACHA,EAAAA,KAAK,EAAEL,GAAF;AADF,CADX,EAUKM,IAVL,CAUU,UAAAC,MAAM;AAAA,SAAIC,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB,CAAJ;AAAA,CAVhB;AAeA,IAAMC,cAAc,GAAGX,GAAH,oBAApB;AASA,eAAe,SAASY,aAAT,GAAyB;AAAA,kBACHb,QAAQ,CAACY,cAAD,CADL;AAAA,MAC5BE,OAD4B,aAC5BA,OAD4B;AAAA,MACnBC,KADmB,aACnBA,KADmB;AAAA,MACZJ,IADY,aACZA,IADY;;AAGpC,MAAIG,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,SAAOJ,IAAI,CAACK,KAAL,CAAWC,GAAX,CAAe;AAAA,QAAGC,QAAH,QAAGA,QAAH;AAAA,QAAaC,IAAb,QAAaA,IAAb;AAAA,WACpB,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAED,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA6BA,QAA7B,QAAyCC,IAAzC,CADoB;AAAA,GAAf,CAAP;AAID","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { StyleSheet, Text, View } from 'react-native'\r\n\r\nimport React from 'react';\r\n\r\n\r\nconst client = new ApolloClient({\r\n    uri: 'https://48p1r2roz4.sse.codesandbox.io',\r\n    cache: new InMemoryCache()\r\n});\r\n\r\n\r\nclient\r\n    .query({\r\n        query: gql`\r\n      query GetRates {\r\n        rates(currency: \"USD\") {\r\n          currency\r\n        }\r\n      }\r\n    `\r\n    })\r\n    .then(result => console.log(result.data));\r\n\r\n\r\n\r\n\r\nconst EXCHANGE_RATES = gql`\r\n  query GetExchangeRates {\r\n    rates(currency: \"USD\") {\r\n      currency\r\n      rate\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function ExchangeRates() {\r\n    const { loading, error, data } = useQuery(EXCHANGE_RATES);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error :(</p>;\r\n\r\n    return data.rates.map(({ currency, rate }) => (\r\n      <ScrollView key={currency}> {currency}: {rate}\r\n      </ScrollView> \r\n    ));\r\n  }\r\n  \r\n"]},"metadata":{},"sourceType":"module"}