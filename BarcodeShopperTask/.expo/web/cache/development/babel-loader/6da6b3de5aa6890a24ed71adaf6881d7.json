{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React Bar Code Reader\\\\BarcodeShopperProject\\\\components\\\\Scanner.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport axios from \"axios\";\n\nvar Scanner = function Scanner(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  var _useState5 = useState([props.id]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      ID = _useState6[0],\n      setID = _useState6[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === \"granted\");\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type, data;\n    return _regeneratorRuntime.async(function handleBarCodeScanned$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            type = _ref.type, data = _ref.data;\n            setScanned(true);\n            setID(_objectSpread(_objectSpread({}, ID), {}, {\n              ID: data\n            }));\n            alert(\"ID: \" + data + \"  scanned!\");\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.cameraContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFill,\n    onChange: scanned ? undefined : handleBarCodeScannedr,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), React.createElement(Image, {\n    style: styles.barcode,\n    source: require(\"../assets/images/barcode2.png\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.txt,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, ID.id), scanned && React.createElement(Button, {\n    style: styles.btn,\n    color: \"#00a3cc\",\n    title: \"Scan Again?\",\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }));\n};\n\nvar _Dimensions$get = Dimensions.get(\"screen\"),\n    width = _Dimensions$get.width;\n\nvar qrSize = width * 0.5;\nvar styles = StyleSheet.create({\n  cameraContainer: {\n    flex: 3,\n    flexDirection: \"column\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\"\n  },\n  barcode: {\n    marginBottom: \"70%\",\n    width: qrSize * 1.5,\n    height: qrSize\n  },\n  txt: {\n    fontSize: width * 0.06,\n    marginTop: \"10%\",\n    textAlign: \"center\",\n    width: \"70%\",\n    color: \"white\",\n    zIndex: 100\n  },\n  btn: {}\n});\nexport default Scanner;","map":{"version":3,"sources":["C:/Users/User/Desktop/React Bar Code Reader/BarcodeShopperProject/components/Scanner.js"],"names":["React","useState","useEffect","BarCodeScanner","axios","Scanner","props","hasPermission","setHasPermission","scanned","setScanned","id","ID","setID","requestPermissionsAsync","status","handleBarCodeScanned","type","data","alert","styles","cameraContainer","undefined","StyleSheet","absoluteFill","handleBarCodeScannedr","barcode","require","txt","btn","Dimensions","get","width","qrSize","create","flex","flexDirection","justifyContent","alignItems","marginBottom","height","fontSize","marginTop","textAlign","color","zIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  StyleSheet,\r\n  Button,\r\n  Image,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n  Alert,\r\n} from \"react-native\";\r\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\r\nimport axios from \"axios\";\r\n\r\nconst Scanner = (props) => {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n  const [ID, setID] = useState([props.id]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === \"granted\");\r\n    })();\r\n  }, []);\r\n\r\n  // const fetchData = () => {\r\n  //   //shopifys graphql uri\r\n  //   const urlGraphQL = \"http://192.168.1.224:4000/graphql\";\r\n  //   //shopifys Rest API\r\n  //   const urlAPI =\r\n  //     \"https://d47831e4e5086f0352adceeaa698d093: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@idk.myshopify.com/admin/api/2020-01/orders.json\";\r\n  //   //my server\r\n  //   const urlBackend = \"http://192.168.1.224:4000/graphql\";\r\n\r\n  //   return axios\r\n  //     .get(urlBackend)\r\n  //     .then((response) => response.json())\r\n  //     .then((listData) => {\r\n  //       setListData({ listData });\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.error(error);\r\n  //     });\r\n  // };\r\n\r\n  const handleBarCodeScanned = async ({ type, data }) => {\r\n    setScanned(true);\r\n    setID({ ...ID, ID: data });\r\n    alert(`ID: ${data}  scanned!`);\r\n\r\n    //  fetchData();\r\n  };\r\n  // const handleChange = () => {\r\n  //   setID({ ID: ID.id });\r\n  // };\r\n  if (hasPermission === null) {\r\n    return <Text>Requesting for camera permission</Text>;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return (\r\n    <View style={styles.cameraContainer}>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n        style={StyleSheet.absoluteFill}\r\n        onChange={scanned ? undefined : handleBarCodeScannedr}\r\n      />\r\n      <Image\r\n        style={styles.barcode}\r\n        source={require(\"../assets/images/barcode2.png\")}\r\n      />\r\n      <Text style={styles.txt}>{ID.id}</Text>\r\n      {scanned && (\r\n        <Button\r\n          style={styles.btn}\r\n          color=\"#00a3cc\"\r\n          title={\"Scan Again?\"}\r\n          onPress={() => setScanned(false)}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\nconst { width } = Dimensions.get(\"screen\");\r\nconst qrSize = width * 0.5;\r\nconst styles = StyleSheet.create({\r\n  cameraContainer: {\r\n    flex: 3,\r\n    flexDirection: \"column\",\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"center\",\r\n  },\r\n  barcode: {\r\n    marginBottom: \"70%\",\r\n    width: qrSize * 1.5,\r\n    height: qrSize,\r\n  },\r\n  txt: {\r\n    fontSize: width * 0.06,\r\n    marginTop: \"10%\",\r\n    textAlign: \"center\",\r\n    width: \"70%\",\r\n    color: \"white\",\r\n    zIndex: 100\r\n  },\r\n  btn:{\r\n\r\n\r\n  }\r\n});\r\n\r\nexport default Scanner;\r\n"]},"metadata":{},"sourceType":"module"}