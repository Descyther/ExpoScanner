{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React Bar Code Reader\\\\BarcodeShopperProject\\\\components\\\\Scanner.js\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nexport default function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: camStyle.cameraContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: (StyleSheet.absoluteFillObject, {\n      width: Dimensions.get('screen').width,\n      height: Dimensions.get('screen').height\n    }),\n    ratio: \"16:9\",\n    barCodeTypes: [BarCodeScanner.Constants.BarCodeType.qr],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 19\n    }\n  }));\n}\nvar camStyle = StyleSheet.create({\n  cameraContainer: {\n    overflow: 'hidden',\n    height: \"100%\"\n  }\n});","map":{"version":3,"sources":["C:/Users/User/Desktop/React Bar Code Reader/BarcodeShopperProject/components/Scanner.js"],"names":["React","useState","useEffect","BarCodeScanner","App","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","alert","camStyle","cameraContainer","undefined","StyleSheet","absoluteFillObject","width","Dimensions","get","height","Constants","BarCodeType","qr","create","overflow"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACcH,QAAQ,CAAC,IAAD,CADtB;AAAA;AAAA,MACrBI,aADqB;AAAA,MACNC,gBADM;;AAAA,mBAEEL,QAAQ,CAAC,KAAD,CAFV;AAAA;AAAA,MAErBM,OAFqB;AAAA,MAEZC,UAFY;;AAI5BN,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC0BC,cAAc,CAACM,uBAAf,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,yBACSA,MADT;AAECJ,cAAAA,gBAAgB,CAACI,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAoB;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAC/CL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAM,IAAAA,KAAK,yBAAuBF,IAAvB,kBAAwCC,IAAxC,wBAAL;AACD,GAHD;;AAKA,MAAIR,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAP;AACD;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD;;AAED,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,EACHU,QAAQ,CAACC,eAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAET,OAAO,GAAGU,SAAH,GAAeN,oBAD1C;AAEE,IAAA,KAAK,GAAEO,UAAU,CAACC,kBAAX,EAA+B;AAClCC,MAAAA,KAAK,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KADE;AAElCG,MAAAA,MAAM,EAAEF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC;AAFC,KAAjC,CAFP;AAME,IAAA,KAAK,EAAC,MANR;AAOE,IAAA,YAAY,EAAE,CAACpB,cAAc,CAACqB,SAAf,CAAyBC,WAAzB,CAAqCC,EAAtC,CAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAcGnB,OAAO,IAAI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,mBAAf;AAAoC,IAAA,OAAO,EAAE;AAAA,aAAMC,UAAU,CAAC,KAAD,CAAhB;AAAA,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdd,CADF;AAkBD;AAGD,IAAMO,QAAQ,GAAGG,UAAU,CAACS,MAAX,CAAkB;AAC/BX,EAAAA,eAAe,EAAE;AACbY,IAAAA,QAAQ,EAAE,QADG;AAEbL,IAAAA,MAAM,EAAE;AAFK;AADc,CAAlB,CAAjB","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Text, View, StyleSheet, Button, Dimensions } from 'react-native';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\n\r\nexport default function App() {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n  const handleBarCodeScanned = ({ type, data }) => {\r\n    setScanned(true);\r\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\r\n  };\r\n\r\n  if (hasPermission === null) {\r\n    return <Text>Requesting for camera permission</Text>;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return (\r\n    <View\r\n      style={\r\n        camStyle.cameraContainer\r\n      }>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n        style={StyleSheet.absoluteFillObject, {\r\n            width: Dimensions.get('screen').width,\r\n            height: Dimensions.get('screen').height,\r\n        }}\r\n        ratio='16:9'\r\n        barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}\r\n      />\r\n\r\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\r\n    </View>\r\n  );\r\n}\r\n\r\n\r\nconst camStyle = StyleSheet.create({\r\n    cameraContainer: {\r\n        overflow: 'hidden',\r\n        height: \"100%\",\r\n    }\r\n  });"]},"metadata":{},"sourceType":"module"}