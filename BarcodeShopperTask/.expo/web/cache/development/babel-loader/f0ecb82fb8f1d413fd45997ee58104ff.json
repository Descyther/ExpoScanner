{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React Bar Code Reader\\\\BarcodeShopperProject\\\\index.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  query GetExchangeRates {\\n    rates(currency: \\\"USD\\\") {\\n      currency\\n      rate\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n      query GetRates {\\n        rates(currency: \\\"USD\\\") {\\n          currency\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { useQuery, gql } from '@apollo/client';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nvar client = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  cache: new InMemoryCache()\n});\nclient.query({\n  query: gql(_templateObject())\n}).then(function (result) {\n  return console.log(result);\n});\nvar EXCHANGE_RATES = gql(_templateObject2());\nexport default function ExchangeRates() {\n  var _useQuery = useQuery(EXCHANGE_RATES),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 25\n    }\n  }, \"Loading...\");\n  if (error) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 23\n    }\n  }, \"Error :(\");\n  return data.rates.map(function (_ref) {\n    var currency = _ref.currency,\n        rate = _ref.rate;\n    return React.createElement(View, {\n      key: currency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, currency, \": \", rate));\n  });\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/React Bar Code Reader/BarcodeShopperProject/index.js"],"names":["ApolloClient","InMemoryCache","useQuery","gql","client","uri","cache","query","then","result","console","log","EXCHANGE_RATES","ExchangeRates","loading","error","data","rates","map","currency","rate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;;;;AAMA,IAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC5BK,EAAAA,GAAG,EAAE,uCADuB;AAE5BC,EAAAA,KAAK,EAAE,IAAIL,aAAJ;AAFqB,CAAjB,CAAf;AAMAG,MAAM,CACDG,KADL,CACW;AACHA,EAAAA,KAAK,EAAEJ,GAAF;AADF,CADX,EAUKK,IAVL,CAUU,UAAAC,MAAM;AAAA,SAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAJ;AAAA,CAVhB;AAeA,IAAMG,cAAc,GAAGT,GAAH,oBAApB;AASA,eAAe,SAASU,aAAT,GAAyB;AAAA,kBACHX,QAAQ,CAACU,cAAD,CADL;AAAA,MAC5BE,OAD4B,aAC5BA,OAD4B;AAAA,MACnBC,KADmB,aACnBA,KADmB;AAAA,MACZC,IADY,aACZA,IADY;;AAGpC,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,SAAOC,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAe;AAAA,QAAGC,QAAH,QAAGA,QAAH;AAAA,QAAaC,IAAb,QAAaA,IAAb;AAAA,WAClB,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAED,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOA,QAAP,QAAmBC,IAAnB,CADJ,CADkB;AAAA,GAAf,CAAP;AAKH","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { StyleSheet, Text, View } from 'react-native'\r\n\r\n\r\n\r\n\r\nconst client = new ApolloClient({\r\n    uri: 'https://48p1r2roz4.sse.codesandbox.io',\r\n    cache: new InMemoryCache()\r\n});\r\n\r\n\r\nclient\r\n    .query({\r\n        query: gql`\r\n      query GetRates {\r\n        rates(currency: \"USD\") {\r\n          currency\r\n        }\r\n      }\r\n    `\r\n    })\r\n    .then(result => console.log(result));\r\n\r\n\r\n\r\n\r\nconst EXCHANGE_RATES = gql`\r\n  query GetExchangeRates {\r\n    rates(currency: \"USD\") {\r\n      currency\r\n      rate\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function ExchangeRates() {\r\n    const { loading, error, data } = useQuery(EXCHANGE_RATES);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error :(</p>;\r\n\r\n    return data.rates.map(({ currency, rate }) => (\r\n        <View key={currency}>\r\n            <Text>{currency}: {rate}</Text>\r\n        </View>\r\n    ));\r\n}"]},"metadata":{},"sourceType":"module"}