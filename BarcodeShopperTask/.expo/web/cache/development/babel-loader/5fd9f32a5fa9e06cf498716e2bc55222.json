{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React Bar Code Reader\\\\BarcodeShopperProject\\\\hi.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n    {\\n      rates(currency: \\\"USD\\\") {\\n        currency\\n        rate\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { useQuery, gql } from '@apollo/client';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React from 'react';\nvar client = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  cache: new InMemoryCache()\n});\nexport default function ExchangeRates() {\n  var _useQuery$then = useQuery(gql(_templateObject())).then(function (result) {\n    return console.log(result);\n  }),\n      loading = _useQuery$then.loading,\n      error = _useQuery$then.error,\n      data = _useQuery$then.data;\n\n  return result.map(function (_ref) {\n    var currency = _ref.currency,\n        rate = _ref.rate;\n    return React.createElement(ScrollView, {\n      key: currency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, \" \", currency, \": \", rate);\n  });\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/React Bar Code Reader/BarcodeShopperProject/hi.js"],"names":["ApolloClient","InMemoryCache","useQuery","gql","React","client","uri","cache","ExchangeRates","then","result","console","log","loading","error","data","map","currency","rate"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;;;;AAGA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,IAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC5BM,EAAAA,GAAG,EAAE,uCADuB;AAE5BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAFqB,CAAjB,CAAf;AAQA,eAAe,SAASO,aAAT,GAAyB;AAAA,uBACLN,QAAQ,CAACC,GAAD,oBAAR,CAQhCM,IARgC,CAQ3B,UAAAC,MAAM;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAJ;AAAA,GARqB,CADK;AAAA,MAC9BG,OAD8B,kBAC9BA,OAD8B;AAAA,MACrBC,KADqB,kBACrBA,KADqB;AAAA,MACdC,IADc,kBACdA,IADc;;AAWpC,SAAOL,MAAM,CAACM,GAAP,CAAW;AAAA,QAAGC,QAAH,QAAGA,QAAH;AAAA,QAAaC,IAAb,QAAaA,IAAb;AAAA,WAChB,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAED,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA6BA,QAA7B,QAAyCC,IAAzC,CADgB;AAAA,GAAX,CAAP;AAID","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { StyleSheet, Text, View } from 'react-native'\r\n\r\nimport React from 'react';\r\n\r\n\r\nconst client = new ApolloClient({\r\n    uri: 'https://48p1r2roz4.sse.codesandbox.io',\r\n    cache: new InMemoryCache()\r\n});\r\n\r\n\r\n\r\n\r\nexport default function ExchangeRates() {\r\n  const { loading, error, data } = useQuery(gql`\r\n    {\r\n      rates(currency: \"USD\") {\r\n        currency\r\n        rate\r\n      }\r\n    }\r\n  `)\r\n  .then(result => console.log(result));\r\n\r\n    return result.map(({ currency, rate }) => (\r\n      <ScrollView key={currency}> {currency}: {rate}\r\n      </ScrollView> \r\n    ));\r\n  }\r\n  \r\n"]},"metadata":{},"sourceType":"module"}